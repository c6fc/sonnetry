local sonnetry = import 'sonnetry';

{
	local aws = self,

	client(service, params={}):: {
		service: service,
		params: params
	},

	api(clientObj, method, params=""):: std.native('aws')(
		std.manifestJsonEx(clientObj, ''),
		method,
		std.manifestJsonEx(params, '')
	),

	call(name, method, params=""):: aws.api(
		aws.client(name),
		method,
		params
	),

	assertIdentity(arn)::
		assert aws.getCallerIdentity().Arn == arn : "Not authenticated as [ %s ]" % [arn];
		arn,

	getCallerIdentity():: aws.call('STS', 'getCallerIdentity'),

	getRegionsList():: std.map(
		function (x) x.RegionName,
		aws.call('EC2', 'describeRegions').Regions
	),

	getAvailabilityZones():: {
		[region]: std.map(
			function (x) x.ZoneName,
			aws.api(aws.client('EC2', { region: region }), 'describeAvailabilityZones').AvailabilityZones
		) for region in aws.getRegionsList()
	},

	providerAliases(default):: [{
		aws: {
			alias: region,
			region: region
		}
	} for region in aws.getRegionsList()] + [{
		aws: {
			region: default
		}
	}]
}